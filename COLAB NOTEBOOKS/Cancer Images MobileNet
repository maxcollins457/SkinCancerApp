{"cells":[{"cell_type":"markdown","metadata":{"id":"zYfe4W0-jwJ2"},"source":["## Importing necessary libraies"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"H-qGqotGMTnu","executionInfo":{"status":"ok","timestamp":1700838366382,"user_tz":0,"elapsed":10674,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import os\n","from glob import glob\n","import matplotlib.pyplot as plt\n","\n","\n","import tensorflow as tf\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, MaxPool2D , Flatten, Dropout, GlobalAveragePooling2D\n","from keras.optimizers import Adam\n","from keras.callbacks import ReduceLROnPlateau\n","from keras.preprocessing.image import ImageDataGenerator\n","from sklearn.metrics import  ConfusionMatrixDisplay\n","from keras.utils import plot_model"]},{"cell_type":"markdown","metadata":{"id":"iF-aaIa9j5af"},"source":["## EDA and Data Preprocessing\n","\n","Before we can begin training/testing the model, EDA is required to assess what preprocessing will be needed."]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":29130,"status":"ok","timestamp":1700838395509,"user":{"displayName":"Max C","userId":"15129973457982956339"},"user_tz":0},"id":"8D_WOs06M6V-"},"outputs":[],"source":["meta_data = pd.read_csv(\"/content/drive/My Drive/CancerImages/HAM10000_metadata.csv\")\n","\n","lesion_type_dict = {\n","    'nv': 'Melanocytic nevi',\n","    'mel': 'Melanoma',\n","    'bkl': 'Benign keratosis-like lesions ',\n","    'bcc': 'Basal cell carcinoma',\n","    'akiec': 'Actinic keratoses',\n","    'vasc': 'Vascular lesions',\n","    'df': 'Dermatofibroma'\n","}\n","\n","# Check the class names and their corresponding indices\n","class_names = list(lesion_type_dict.values())\n","# Get the class index mapping\n","class_index_mapping = {class_name: idx for idx, class_name in enumerate(class_names)}\n","\n","is_cancerous = {\n","    'nv': 0,\n","    'mel': 1,\n","    'bkl': 0,\n","    'bcc': 1,\n","    'akiec': 0,\n","    'vasc': 0,\n","    'df': 0\n","}\n","\n","base_skin_dir = '/content/drive/My Drive/CancerImages'\n","\n","imageid_path_dict = {os.path.splitext(os.path.basename(x))[0]: x\n","                     for x in glob(os.path.join(base_skin_dir, '*', '*.jpg'))}\n","\n","\n","# Add path to image to meta_data\n","meta_data['path'] = meta_data['image_id'].map(imageid_path_dict.get)\n","# Add lesion type to image to meta_data\n","meta_data['cell_type'] = meta_data['dx'].map(lesion_type_dict.get)\n","# Convert this to categorical\n","meta_data['cell_type_idx'] = pd.Categorical(meta_data['cell_type']).codes\n","\n","# Fill empty ages with mean\n","meta_data['age'].fillna((meta_data['age'].mean()), inplace=True)"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":246,"status":"ok","timestamp":1700838395752,"user":{"displayName":"Max C","userId":"15129973457982956339"},"user_tz":0},"id":"rBrOmuQ9XBM7","outputId":"d420b053-1dc3-4be0-c775-f346d63acec0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{2: 0.467697907188353,\n"," 0: 0.07665920954511558,\n"," 6: 4.469565217391304,\n"," 1: 0.4618149146451033,\n"," 5: 3.619718309859155,\n"," 3: 1.0,\n"," 4: 1.5718654434250765}"]},"metadata":{},"execution_count":3}],"source":["labels = list(meta_data['cell_type'].unique())\n","ids = [class_index_mapping.get(label) for label in labels]\n","\n","def estimate_weights_mfb(label):\n","    class_weights = np.zeros_like(label, dtype=float)\n","    counts = np.zeros_like(label)\n","    for i,l in enumerate(label):\n","        counts[i] = meta_data[meta_data['cell_type']==str(l)]['cell_type'].value_counts()[0]\n","    counts = counts.astype(float)\n","    median_freq = np.median(counts)\n","    for i, label in enumerate(label):\n","        class_weights[i] = median_freq / counts[i]\n","    return class_weights\n","\n","classweights = estimate_weights_mfb(labels)\n","\n","classweight_dict = {label: weight for label, weight in zip(ids, classweights)}\n","\n","meta_data['class_weight'] = meta_data['cell_type'].map(classweight_dict.get)\n","\n","\n","classweight_dict"]},{"cell_type":"code","source":["code_to_name = {code:name for code, name in zip(ids,labels)}\n","code_to_name"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q8jCDK6PIqMI","executionInfo":{"status":"ok","timestamp":1700838395752,"user_tz":0,"elapsed":4,"user":{"displayName":"Max C","userId":"15129973457982956339"}},"outputId":"34fd3074-69c0-4cea-f3f3-5938ffbcfd8c"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{2: 'Benign keratosis-like lesions ',\n"," 0: 'Melanocytic nevi',\n"," 6: 'Dermatofibroma',\n"," 1: 'Melanoma',\n"," 5: 'Vascular lesions',\n"," 3: 'Basal cell carcinoma',\n"," 4: 'Actinic keratoses'}"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"ePFlhDafbaHn"},"source":["## Setup for ML\n","Need to to add images to the dataset.\n","\n","Then need to split into train/validation/test sets.\n"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"3iIqHI56aNbm","executionInfo":{"status":"ok","timestamp":1700838395752,"user_tz":0,"elapsed":2,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"outputs":[],"source":["df = meta_data.copy(deep=True)"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":36330,"status":"ok","timestamp":1700838432080,"user":{"displayName":"Max C","userId":"15129973457982956339"},"user_tz":0},"id":"VABo9kXMEvh_","outputId":"9aa171fc-35c3-4dc6-aec6-b651e8fddae4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 10015 files belonging to 7 classes.\n","Using 8012 files for training.\n","Found 10015 files belonging to 7 classes.\n","Using 2003 files for validation.\n"]}],"source":["img_size = (75, 100)\n","\n","# Set up the training dataset with a validation split\n","train_dataset = tf.keras.utils.image_dataset_from_directory(\n","    directory='/content/drive/My Drive/CancerImages/Images/',\n","    label_mode='categorical',\n","    class_names=list(lesion_type_dict.values()),\n","    image_size=img_size,\n","    seed=1234,\n","    validation_split=0.2,\n","    subset='training'\n",")\n","\n","# Set up the training dataset with a validation split\n","validation_dataset = tf.keras.utils.image_dataset_from_directory(\n","    directory='/content/drive/My Drive/CancerImages/Images/',\n","    label_mode='categorical',\n","    class_names=list(lesion_type_dict.values()),\n","    image_size=img_size,\n","    seed=1234,\n","    validation_split=0.2,\n","    subset='validation'\n",")\n","\n","val_batches = tf.data.experimental.cardinality(validation_dataset)\n","test_dataset = validation_dataset.take(val_batches // 5)\n","validation_dataset = validation_dataset.skip(val_batches // 5)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"lT0fIefwHpOU","executionInfo":{"status":"ok","timestamp":1700838432081,"user_tz":0,"elapsed":5,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"outputs":[],"source":["AUTOTUNE = tf.data.AUTOTUNE\n","\n","train_dataset = train_dataset.prefetch(buffer_size=AUTOTUNE)\n","validation_dataset = validation_dataset.prefetch(buffer_size=AUTOTUNE)\n","test_dataset = test_dataset.prefetch(buffer_size=AUTOTUNE)"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"bxY_ElR3HqKQ","executionInfo":{"status":"ok","timestamp":1700838630814,"user_tz":0,"elapsed":3170,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"outputs":[],"source":["from tensorflow.keras.models import Sequential, Model, load_model\n","model = load_model('/content/drive/My Drive/CancerImages/Models/model.h5')"]},{"cell_type":"markdown","metadata":{"id":"R_ig0ifwkPIA"},"source":["## Model Setup\n","\n","Now the data has been appropriately preprocessed, the model must be set up so it can be trained on the data."]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":5,"status":"aborted","timestamp":1700838432432,"user":{"displayName":"Max C","userId":"15129973457982956339"},"user_tz":0},"id":"LGYkOV_v_2vi"},"outputs":[],"source":["input_shape = img_size + (3,)\n","n_classes = len(list(lesion_type_dict.values()))\n","\n","#Randomly flip, rotate and zoom the data\n","data_augmentation = tf.keras.Sequential([\n","  tf.keras.layers.RandomFlip('horizontal'),\n","  tf.keras.layers.RandomRotation(0.2),\n","  tf.keras.layers.RandomZoom(.5, .2)\n","])\n","\n","#Rescale input to be [-1, 1] not [0, 255]\n","preprocess_input = tf.keras.applications.mobilenet_v2.preprocess_input\n","\n","# Define structure of base model\n","base_model = tf.keras.applications.MobileNetV2(input_shape=input_shape,\n","                                               include_top=False,\n","                                               weights='imagenet')\n","\n","#Freeze the weights of base model\n","base_model.trainable = False\n","\n","\n","#Add a prediction layer\n","global_average_layer = GlobalAveragePooling2D()\n","prediction_layer  = Dense(n_classes, activation='softmax')\n","\n","\n","#Combine preprocessing and model\n","inputs = tf.keras.Input(shape=input_shape)\n","x = data_augmentation(inputs)\n","x = preprocess_input(x)\n","x = base_model(x, training=False)\n","x = global_average_layer(x)\n","x = Dropout(0.2)(x)\n","outputs = prediction_layer(x)\n","model = tf.keras.Model(inputs, outputs)\n","model.summary()\n","\n","# Define the optimizer\n","base_learning_rate = 0.0001\n","optimizer = Adam(learning_rate= base_learning_rate)\n","\n","# Compile the model\n","\n","model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sti3djnjc_1N","executionInfo":{"status":"aborted","timestamp":1700838432432,"user_tz":0,"elapsed":5,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"outputs":[],"source":["initial_epochs = 5\n","\n","history = model.fit(train_dataset,\n","                    epochs=initial_epochs,\n","                    validation_data=validation_dataset,\n","                    class_weight = classweight_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XKS04cuddFTJ","executionInfo":{"status":"aborted","timestamp":1700838432433,"user_tz":0,"elapsed":6,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"outputs":[],"source":["acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","plt.figure(figsize=(8, 8))\n","plt.subplot(2, 1, 1)\n","plt.plot(acc, label='Training Accuracy')\n","plt.plot(val_acc, label='Validation Accuracy')\n","plt.legend(loc='lower right')\n","plt.ylabel('Accuracy')\n","plt.title('Training and Validation Accuracy')"]},{"cell_type":"code","source":["# model.save(base_skin_dir + 'WeightedClass.keras')"],"metadata":{"id":"jF7xVT0xhIgB","executionInfo":{"status":"aborted","timestamp":1700838432433,"user_tz":0,"elapsed":6,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8utUkk9NdUOF"},"source":["## Model Performance"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"byZnJd7qdZiC","colab":{"base_uri":"https://localhost:8080/","height":663},"executionInfo":{"status":"ok","timestamp":1700838708139,"user_tz":0,"elapsed":70299,"user":{"displayName":"Max C","userId":"15129973457982956339"}},"outputId":"896dc544-7c62-4450-9a2f-cd93387e6a7f"},"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 1s 531ms/step\n","1/1 [==============================] - 0s 290ms/step\n","1/1 [==============================] - 0s 288ms/step\n","1/1 [==============================] - 1s 1s/step\n","1/1 [==============================] - 1s 1s/step\n","1/1 [==============================] - 1s 643ms/step\n","1/1 [==============================] - 0s 260ms/step\n","1/1 [==============================] - 0s 259ms/step\n","1/1 [==============================] - 0s 499ms/step\n","1/1 [==============================] - 0s 263ms/step\n","1/1 [==============================] - 0s 270ms/step\n","1/1 [==============================] - 0s 286ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["y_pred = []  # store predicted labels\n","y_true = []  # store true labels\n","\n","# iterate over the dataset\n","for image_batch, label_batch in test_dataset:   # use dataset.unbatch() with repeat\n","   # append true labels\n","   y_true.append(label_batch)\n","   # compute predictions\n","   preds = model.predict(image_batch)\n","   # append predicted labels\n","   y_pred.append(np.argmax(preds, axis = - 1))\n","\n","# # convert the true and predicted labels into tensors\n","correct_labels = tf.concat([np.argmax(item, axis=1) for item in y_true], axis = 0)\n","predicted_labels = tf.concat([item for item in y_pred], axis = 0)\n","\n","\n","# Display the confusion matrix with rotated x-axis labels\n","ConfusionMatrixDisplay.from_predictions(y_test, Y_pred_classes,display_labels=list(code_to_name.values()), cmap='inferno', normalize='true', values_format=\".0%\")\n","plt.xticks(rotation=90)\n","plt.grid(False)\n","plt.show()\n","\n","code_to_name = {code:name for code, name in zip(ids,labels)}"]},{"cell_type":"code","source":["base_model.trainable = True\n","\n","# Let's take a look to see how many layers are in the base model\n","print(\"Number of layers in the base model: \", len(base_model.layers))\n","\n","# Fine-tune from this layer onwards\n","fine_tune_at = 110\n","\n","# Freeze all the layers before the `fine_tune_at` layer\n","for layer in base_model.layers[:fine_tune_at]:\n","  layer.trainable = False\n","\n","\n","optimizer = Adam(learning_rate= base_learning_rate/10)\n","\n","# Compile the model\n","\n","model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n","\n","\n","fine_tune_epochs = 5\n","total_epochs =  initial_epochs + fine_tune_epochs\n","\n","history_fine = model.fit(train_dataset,\n","                         epochs=total_epochs,\n","                         initial_epoch=history.epoch[-1],\n","                         validation_data=validation_dataset,\n","                    class_weight = classweight_dict)\n"],"metadata":{"id":"rshBZ5Qbl3QX","executionInfo":{"status":"aborted","timestamp":1700838432433,"user_tz":0,"elapsed":5,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["acc += history_fine.history['accuracy']\n","val_acc += history_fine.history['val_accuracy']\n","\n","plt.figure(figsize=(8, 8))\n","plt.subplot(2, 1, 1)\n","plt.plot(acc, label='Training Accuracy')\n","plt.plot(val_acc, label='Validation Accuracy')\n","plt.plot([initial_epochs-1,initial_epochs-1],\n","          plt.ylim(), label='Start Fine Tuning')\n","plt.legend(loc='lower right')\n","plt.title('Training and Validation Accuracy')"],"metadata":{"id":"LyCHFjVbrzYC","executionInfo":{"status":"aborted","timestamp":1700838432433,"user_tz":0,"elapsed":5,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred = []  # store predicted labels\n","y_true = []  # store true labels\n","\n","# iterate over the dataset\n","for image_batch, label_batch in test_dataset:   # use dataset.unbatch() with repeat\n","   # append true labels\n","   y_true.append(label_batch)\n","   # compute predictions\n","   preds = model.predict(image_batch)\n","   # append predicted labels\n","   y_pred.append(np.argmax(preds, axis = - 1))\n","\n","# # convert the true and predicted labels into tensors\n","correct_labels = tf.concat([np.argmax(item, axis=1) for item in y_true], axis = 0)\n","predicted_labels = tf.concat([item for item in y_pred], axis = 0)\n","\n","\n","ConfusionMatrixDisplay.from_predictions(correct_labels, predicted_labels, normalize='true', cmap = 'inferno')\n","plt.grid(False)\n","plt.show()"],"metadata":{"id":"t3sehcU-mCum","executionInfo":{"status":"aborted","timestamp":1700838432433,"user_tz":0,"elapsed":5,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.save('FineTuneWeightedClassMobileNet.keras')"],"metadata":{"id":"5bFNIk7S4MFG","executionInfo":{"status":"aborted","timestamp":1700838432433,"user_tz":0,"elapsed":5,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_model.trainable = True\n","# Fine-tune from this layer onwards\n","fine_tune_at = 100\n","\n","# Freeze all the layers before the `fine_tune_at` layer\n","for layer in base_model.layers[:fine_tune_at]:\n","  layer.trainable = False\n","\n","\n","optimizer = Adam(learning_rate= base_learning_rate/15)\n","\n","# Compile the model\n","\n","model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n","\n","\n","double_fine_tune_epochs = 5\n","total_epochs =  initial_epochs + fine_tune_epochs + double_fine_tune_epochs\n","\n","history_double_fine = model.fit(train_dataset,\n","                         epochs=total_epochs,\n","                         initial_epoch=history_fine.epoch[-1],\n","                         validation_data=validation_dataset,\n","                    class_weight = classweight_dict)\n"],"metadata":{"id":"0-5DD0h1_3n9","executionInfo":{"status":"aborted","timestamp":1700838432434,"user_tz":0,"elapsed":6,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred = []  # store predicted labels\n","y_true = []  # store true labels\n","\n","# iterate over the dataset\n","for image_batch, label_batch in test_dataset:   # use dataset.unbatch() with repeat\n","   # append true labels\n","   y_true.append(label_batch)\n","   # compute predictions\n","   preds = model.predict(image_batch)\n","   # append predicted labels\n","   y_pred.append(np.argmax(preds, axis = - 1))\n","\n","# # convert the true and predicted labels into tensors\n","correct_labels = tf.concat([np.argmax(item, axis=1) for item in y_true], axis = 0)\n","predicted_labels = tf.concat([item for item in y_pred], axis = 0)\n","\n","\n","ConfusionMatrixDisplay.from_predictions(correct_labels, predicted_labels, normalize='true', cmap = 'inferno')\n","plt.grid(False)\n","plt.show()\n","\n","model.save('DoubleFineTuneWeightedClassMobileNet.keras')"],"metadata":{"id":"PPUXJBG2AJXH","executionInfo":{"status":"aborted","timestamp":1700838432434,"user_tz":0,"elapsed":6,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_model.trainable = True\n","# Fine-tune from this layer onwards\n","fine_tune_at = 80\n","\n","# Freeze all the layers before the `fine_tune_at` layer\n","for layer in base_model.layers[:fine_tune_at]:\n","  layer.trainable = False\n","\n","\n","optimizer = Adam(learning_rate= base_learning_rate/15)\n","\n","# Compile the model\n","\n","model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n","\n","\n","triple_fine_tune_epochs = 5\n","total_epochs =  initial_epochs + fine_tune_epochs + double_fine_tune_epochs + triple_fine_tune_epochs\n","\n","history_tiple_fine = model.fit(train_dataset,\n","                         epochs=total_epochs,\n","                         initial_epoch=history_double_fine.epoch[-1],\n","                         validation_data=validation_dataset,\n","                    class_weight = classweight_dict)\n","\n","\n","y_pred = []  # store predicted labels\n","y_true = []  # store true labels\n","\n","# iterate over the dataset\n","for image_batch, label_batch in test_dataset:   # use dataset.unbatch() with repeat\n","   # append true labels\n","   y_true.append(label_batch)\n","   # compute predictions\n","   preds = model.predict(image_batch)\n","   # append predicted labels\n","   y_pred.append(np.argmax(preds, axis = - 1))\n","\n","# # convert the true and predicted labels into tensors\n","correct_labels = tf.concat([np.argmax(item, axis=1) for item in y_true], axis = 0)\n","predicted_labels = tf.concat([item for item in y_pred], axis = 0)\n","\n","\n","ConfusionMatrixDisplay.from_predictions(correct_labels, predicted_labels, normalize='true', cmap = 'inferno')\n","plt.grid(False)\n","plt.show()\n","\n","model.save('TripleFineTuneWeightedClassMobileNet.keras')"],"metadata":{"id":"hTt7RIa5D8k5","executionInfo":{"status":"aborted","timestamp":1700838432434,"user_tz":0,"elapsed":77422,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["acc += history_double_fine.history['accuracy']\n","val_acc += history_double_fine.history['val_accuracy']\n","\n","acc += history_tiple_fine.history['accuracy']\n","val_acc += history_tiple_fine.history['val_accuracy']\n","\n","plt.figure(figsize=(8, 8))\n","plt.subplot(2, 1, 1)\n","plt.plot(acc, label='Training Accuracy')\n","plt.plot(val_acc, label='Validation Accuracy')\n","plt.plot([initial_epochs-1,initial_epochs-1],\n","          plt.ylim(), label='Start Fine Tuning')\n","plt.plot([initial_epochs+fine_tune_epochs-1,initial_epochs+fine_tune_epochs-1],\n","          plt.ylim(), label='Start Fine Tuning 2')\n","plt.plot([initial_epochs+ fine_tune_epochs + double_fine_tune_epochs-1,initial_epochs+ fine_tune_epochs + double_fine_tune_epochs-1],\n","          plt.ylim(), label='Start Fine Tuning 3')\n","plt.legend(loc='lower right')\n","plt.xlim([0,20])\n","plt.title('Training and Validation Accuracy')"],"metadata":{"id":"-H5zfWJ6GiSS","executionInfo":{"status":"aborted","timestamp":1700838432434,"user_tz":0,"elapsed":77414,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ConfusionMatrixDisplay.from_predictions(correct_labels, predicted_labels,display_labels=list(code_to_name.values()), cmap='inferno', normalize='true', values_format=\".0%\")\n","plt.xticks(rotation=90)\n","plt.grid(False)\n","plt.show()"],"metadata":{"id":"0mEp0XqLIiOi","executionInfo":{"status":"aborted","timestamp":1700838432434,"user_tz":0,"elapsed":77408,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.save('MobileNet.h5')"],"metadata":{"id":"jD5_13VxNVqW","executionInfo":{"status":"aborted","timestamp":1700838432434,"user_tz":0,"elapsed":77406,"user":{"displayName":"Max C","userId":"15129973457982956339"}}},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1d3I3hDm0ioQZE6ZNVA6m6MOUPwdo-K8_","timestamp":1700560877259},{"file_id":"1AjO2LQWmF4aajIcuBp6GphxS56Iz0Ly1","timestamp":1699886706275}],"mount_file_id":"1qSmSiAMVpK7seIBYK0vJB0VLnQz1mNZB","authorship_tag":"ABX9TyNqRebqcAhfmVCE5WrMRmms"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}